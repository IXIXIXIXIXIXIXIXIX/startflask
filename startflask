#!/bin/bash
# Sets up the folder structure and some of the required boilerplate for a basic Flask app

APPNAME=$1
REP="_repository"
REPPATH=app/$APPNAME$REP
mkdir app
mkdir app/controllers app/models app/static app/templates app/db app/repositories 

touch "$APPNAME.py"
echo "from app import app" >> "$APPNAME.py"

touch ".flaskenv"
echo "FLASK_APP=$APPNAME.py" >> ".flaskenv"
echo "FLASK_ENV=development" >> ".flaskenv"

touch "app/__init__.py"
echo "from flask import Flask" >> "app/__init__.py"
echo "app = Flask(__name__)" >> "app/__init__.py"
echo "from app.controllers import controller" >> "app/__init__.py"

touch "app/models/__init__.py"

touch "app/controllers/__init__.py"

touch "app/controllers/controller.py"
echo "from app import app" >> "app/controllers/controller.py"
echo "from flask import render_template" >> "app/controllers/controller.py"
echo "" >> "app/controllers/controller.py"
echo "@app.route('/')" >> "app/controllers/controller.py"
echo "def index():" >> "app/controllers/controller.py"
echo "	return render_template('index.html')" >> "app/controllers/controller.py"
echo "	# Change this route, obviously" >> "app/controllers/controller.py"

touch "app/models/__init__.py"
touch "app/static/style.css"

touch "app/templates/base.html"


echo "<!DOCTYPE html>" >> "app/templates/base.html"
echo "<html lang=\"en\">" >> "app/templates/base.html"
echo "<head>" >> "app/templates/base.html"
echo     "<meta charset=\"UTF-8\">" >> "app/templates/base.html"
echo     "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">" >> "app/templates/base.html"
echo     "<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">" >> "app/templates/base.html"
echo     "<title>Document</title>" >> "app/templates/base.html"
echo "</head>" >> "app/templates/base.html"
echo "" >> "app/templates/base.html"
echo "<body>" >> "app/templates/base.html"
echo     "{% block content %}" >> "app/templates/base.html"
echo     "{% endblock %}" >> "app/templates/base.html"
echo "</body>" >> "app/templates/base.html"
echo "</html>" >> "app/templates/base.html"

touch "app/templates/index.html"
echo "{% extends 'base.html' %}" >> "app/templates/index.html"
echo "" >> "app/templates/index.html"
echo "{% block content %}" >> "app/templates/index.html"
echo "Hello, World!" >> "app/templates/index.html"
echo "{% endblock %}" >> "app/templates/index.html"

touch app/db/$APPNAME.sql
touch app/db/__init__.py
touch app/db/run_sql.py
echo "import psycopg2" >> app/db/run_sql.py
echo "import psycopg2.extras as ext" >> app/db/run_sql.py
echo "" >> app/db/run_sql.py
echo "def run_sql(sql, values = None):" >> app/db/run_sql.py
echo "    conn = None" >> app/db/run_sql.py
echo "    results = []" >> app/db/run_sql.py
echo "" >> app/db/run_sql.py
echo "    try:" >> app/db/run_sql.py
echo "        conn=psycopg2.connect(\"dbname='$APPNAME'\")" >> app/db/run_sql.py
echo "        cur = conn.cursor(cursor_factory=ext.DictCursor)" >> app/db/run_sql.py
echo "        cur.execute(sql, values)" >> app/db/run_sql.py
echo "        conn.commit()" >> app/db/run_sql.py
echo "        results = cur.fetchall()" >> app/db/run_sql.py
echo "        cur.close()" >> app/db/run_sql.py
echo "    except (Exception, psycopg2.DatabaseError) as error:" >> app/db/run_sql.py
echo "        print(error)" >> app/db/run_sql.py
echo "    finally:" >> app/db/run_sql.py
echo "        if conn is not None:" >> app/db/run_sql.py
echo "            conn.close()" >> app/db/run_sql.py
echo "    return results" >> app/db/run_sql.py

createdb $APPNAME